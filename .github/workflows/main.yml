name: Full Stack Deployment

on:
    push:
        branches:
            - main

jobs:
    # Frontend Deployment Job
    build-and-deploy-frontend:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Set up Node.js
              uses: actions/setup-node@v2
              with:
                  node-version: "16"

            - name: Install frontend dependencies
              run: |
                  cd ghi
                  npm install

            - name: Build frontend
              run: |
                  cd ghi
                  npm run build

            - name: Install Railway CLI
              run: npm install -g @railway/cli

            - name: Deploy frontend to Railway
              run: |
                  # Add deployment steps for Railway here (e.g., using Railway CLI)
                  # Example:
                  # Install Railway CLI
                  # npm install -g @railway/cli

                  # Authenticate with Railway using your project token
                  # railway auth:set $RAILWAY_TOKEN

                  # Deploy to Railway
                  railway up
              env:
                  RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

    # Backend Deployment Job
    build-and-deploy-backend:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Set up Python
              uses: actions/setup-python@v2
              with:
                  python-version: "3.x"

            - name: Install backend dependencies
              run: |
                  cd cookit
                  pip install -r requirements.txt

            - name: Set DATABASE_URL environment variable
              run: echo "DATABASE_URL=$DATABASE_URL" >> $GITHUB_ENV

            - name: Set SPOONACULAR_API_KEY environment variable
              run: echo "SPOONACULAR_API_KEY=$SPOONACULAR_API_KEY" >> $GITHUB_ENV

            - name: Set SIGNING_KEY environment variable
              run: echo "SIGNING_KEY=$SIGNING_KEY" >> $GITHUB_ENV

            - name: Debug DATABASE_URL
              run: echo "DATABASE_URL is $DATABASE_URL"

            - name: Debug SPOONACULAR_API_KEY
              run: echo "SPOONACULAR_API_KEY is $SPOONACULAR_API_KEY"

            - name: Debug SIGNING_KEY
              run: echo "SIGNING_KEY is $SIGNING_KEY"

            - name: Deploy FastAPI application with Uvicorn
              run: |
                  cd cookit
                  uvicorn main:app --host 0.0.0.0 --port 8000

            - name: Install Railway CLI
              run: npm install -g @railway/cli

            - name: Deploy backend to Railway
              run: |
                  # Add deployment steps for Railway here (e.g., using Railway CLI)
                  # Example:
                  # Install Railway CLI
                  # npm install -g @railway/cli

                  # Authenticate with Railway using your project token
                  # railway auth:set $RAILWAY_TOKEN

                  # Deploy to Railway
                  export DATABASE_URL=$DATABASE_URL
                  railway up

              env:
                  RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
                  DATABASE_URL: ${{ secrets.DATABASE_URL }}
                  SPOONACULAR_API_KEY: ${{ secrets.SPOONACULAR_API_KEY }}

    deploy-database:
        runs-on: ubuntu-latest

        services:
            postgres:
                image: postgres:14.2-bullseye
                env:
                  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
                  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
                  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
                ports:
                    - 15432:5432
                options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Set up Python
              uses: actions/setup-python@v2
              with:
                  python-version: "3.x"

            - name: Wait for PostgreSQL to start
              run: sleep 10

            - name: Set up environment variables
              run: |
                echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV
                echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> $GITHUB_ENV
                echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> $GITHUB_ENV
                echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> $GITHUB_ENV


            - name: Debug Database Configuration
              run: |
                echo "DATABASE_URL: $DATABASE_URL"
                echo "POSTGRES_USER: $POSTGRES_USER"
                echo "POSTGRES_PASSWORD: $POSTGRES_PASSWORD"
                echo "POSTGRES_DB: $POSTGRES_DB"

            # - name: Run database provisioning scripts (e.g., using psql)
            #   run: |
            #       # Add database provisioning steps here (e.g., using psql to execute scripts)
            #       psql -U $POSTGRES_USER -d $POSTGRES_DB -a -f /data/cookit.sql
            - name: Wait for PostgreSQL to start
              run: |
                for _ in {1..30}; do
                  if pg_isready -h localhost -p 15432 -U $POSTGRES_USER; then
                    break
                  fi
                  sleep 5
                done

            - name: Run database provisioning scripts (e.g., using psql to execute scripts)
              run: |
                # Add your specific database provisioning steps here
                # For example:
                # psql -h localhost -p 15432 -U $POSTGRES_USER -d $POSTGRES_DB -a -f /data/cookit.sql
